<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_236151_service_1.ServiceValidationHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Callable logic for the Service Validation Engine.&#13;
&#13;
UI called functions:&#13;
findServices: Locate all business applications aligned to a blueprint, return all associated application services and create a Service Validation record&#13;
createOrUpdateMappedCIs: Update service validation table with last validation time and call internal functions to create flattened table&#13;
findPatterns: Locate matching patterns for each Mapped CI&#13;
runScores: Calculate for each result how the pattern is performing&#13;
processPatternRemediationTask: For each successful pattern where there was an open task, auto-close.  For each failed pattern, check if there is an outstanding task, if not then create a remediation task.&#13;
autoCertify: If no failed results remain, then set certified checkbox to true on the Service Validation record&#13;
&#13;
Script Include called functions:&#13;
_removeAffectedCI: Remove affected CI if validation result is now true&#13;
_deactivateMappedCIs: For mapped CIs no longer found in rels, set as deactivated&#13;
_removeInactiveResults: Delete results for Mapped CIs which are no longer active&#13;
_getDefaultAssignedTo:  When generating tasks, get the dynamic group/user from the business app or groups table&#13;
_getAppServicesFromBusinessApp: Retrieve sys_ids of app services related to the business application&#13;
_createOrUpdateServiceValidation:  Create or Update the Service Validation record when retrieved via findServices&#13;
_createOrUpdateChild: Retrieve next level CIs related to the referenced Service on the Service Validation table, store within the flattened table&#13;
_wipeDataModels: Remove data model structure for service validation - to be re-built based on new mapped CIs structure&#13;
_findAllChildren: Locate the child CIs from the service and add to flattened table&#13;
_addOrUpdateDataModel:  Create data model structure for service validation - called from _findAllChildren &gt; Rel Helper&#13;
_getTableLabel: Used to retrieve the table name for the Data Model creation&#13;
_validatePattern: Used to validate matching patterns for the mapped CI&#13;
_getNextLevel: Lookup next ordered pattern definition for pattern&#13;
_findTableName: Retrieve the CI Class names for the CI Class list on a pattern definition&#13;
_getServiceFromMappedCI: Retrieve Service sysid from Mapped CI&#13;
_validateRelationship: Check Parent-Child CI Rels against the expected classes&#13;
_createOrUpdateResult: Create or Update Result for Mapped CI&#13;
_createOrUpdateResultSummary: Create grouped result per pattern&#13;
_createOrUpdatePerformanceStat: Create performance logging stat&#13;
_calculateWeightedControlKPI: Calculate KPI score based on pattern result row count and weighting&#13;
_calculateWeightedScore: Get risk level weighting&#13;
_getRiskLevel: Traverse the system property used to store the risk matrix&#13;
</description>
        <name>ServiceValidationHelper</name>
        <script><![CDATA[var ServiceValidationHelper = Class.create();
ServiceValidationHelper.prototype = {
    thresholdMatrix: gs.getProperty('x_236151_service_1.sve.validation_pattern_weighting'),
    initialize: function() {
        this.timer_log = 'Service Validation;Duration\n';
		this.excludedClasses = gs.getProperty('x_236151_service_1.sve.mapped.ci.excluded.ci.classes');
    },
	
	findServices: function() {
		
		// Get a List of Business Apps which are linked to to a Blueprint
		var getBusApps = new GlideRecord('cmdb_ci_business_app');
		getBusApps.addQuery('model_id.sys_class_name', 'cmdb_application_product_model');
		getBusApps.query();
		while (getBusApps.next()){
			var appServices = this._getAppServicesFromBusinessApp(getBusApps.sys_id);
			this._createOrUpdateServiceValidation(appServices, getBusApps);
		}
    },
	
	createOrUpdateMappedCIs: function(service){
		
		var gdt = new GlideDateTime();
		
		// Update last validation time for retrieved service validation record
		var sv = new GlideRecord('x_236151_service_1_service_validation');
		if (sv.get('service', service)) {
			sv.validation_status.setValue('mapping_cis');
			sv.update();
		
		this._deactivateMappedCIs(sv);
		this._createOrUpdateChild(sv, service, service, '0');
		this._wipeDataModels(sv);
		this._findAllChildren(sv, service, '');
			
			sv.last_validation_time.setValue(gdt);
			sv.validation_status.setValue('mapped_cis_retrieved');
			sv.update();
		}
		else{
			gs.debug('Unable to locate Service Validation record for Service Sys_ID ' + service);
		}
		
		this._createOrUpdatePerformanceStat(sv.number + " Retrieve Mapped CIs", gdt, "Function", sv);
		
	},
	
	findPatterns: function(pattern, serviceValidation, type) {
		var gdt = new GlideDateTime();
        
		// Remove any results which have an inactive mapped CI
		this._removeInactiveResults(serviceValidation);
		
		// Lookup associated blueprint patterns
		if (type == 'Blueprint'){
		var getBlueprint = new GlideRecord('x_236151_service_1_m2m_cmdb_applica_x_236151_ser');
			getBlueprint.addQuery('x_236151_service_1_service_validation_pa.active', 'true');
			getBlueprint.addQuery('cmdb_application_product_model', serviceValidation.business_application.model_id);
			getBlueprint.query();
		while (getBlueprint.next()){
			var gdt2 = new GlideDateTime();
			this._validatePattern(getBlueprint.x_236151_service_1_service_validation_pa.getRefRecord(), serviceValidation, type);
            this._createOrUpdatePerformanceStat(serviceValidation.number + " Pattern Validated: " + getBlueprint.x_236151_service_1_service_validation_pa.description, gdt2, "Pattern", serviceValidation);

		}
		}
		else if (type == 'Drift'){
		var getPatterns = new GlideRecord('x_236151_service_1_service_validation_patterns');
        if (pattern.length > 0) {
            getPatterns.addQuery('number', pattern);
        }
        getPatterns.addQuery('active', 'true');
		getPatterns.addQuery('validation_type', type);
        getPatterns.query();
        while (getPatterns.next()) {
            var gdt3 = new GlideDateTime();
            this._validatePattern(getPatterns, serviceValidation, type);
            this._createOrUpdatePerformanceStat(serviceValidation.number + " Pattern Validated: " + getPatterns.description, gdt3, "Pattern", serviceValidation);
        }
		}
			this._createOrUpdatePerformanceStat(serviceValidation.number + " Patterns Validated", gdt, "Function", serviceValidation);
		
    },
	
	runScores: function(serviceValidation) {
		
		var gdt = new GlideDateTime();
		
		// Run scores for Blueprint Pattern KPIs
		this._calculateWeightedControlKPI(serviceValidation.sys_id.toString());
		this._createOrUpdatePerformanceStat(serviceValidation.number + " Scores Calculated", gdt, "Function", serviceValidation);
    },
	
	processPatternRemediationTask: function(serviceValidation){
		
		var patternObj = {};
		var remediationTasks;
		
		// Process Successful Result - Auto Remove Affected CI
		var getSuccessResults = new GlideRecord('x_236151_service_1_service_validation_results');
		getSuccessResults.addQuery('service_validation', serviceValidation.sys_id);
		getSuccessResults.addQuery('service_validation_result', 'true');
		getSuccessResults.addNotNullQuery('remediation_task');
		getSuccessResults.query();
		while (getSuccessResults.next()){
			
			remediationTasks += "," + getSuccessResults.remediation_task;
			this._removeAffectedCI(getSuccessResults.related_ci.ci, getSuccessResults.remediation_task);
			
			// Dissassociate Result from Remediation Task
			getSuccessResults.remediation_task = '';
			getSuccessResults.update();
		}
		
		// Process Failed Result - Create Remediation Task
		var getFailedResults = new GlideRecord('x_236151_service_1_service_validation_results');
		getFailedResults.addQuery('service_validation', serviceValidation.sys_id);
		getFailedResults.addQuery('service_validation_result', 'false');
		getFailedResults.addQuery('service_validation_pattern.create_task', 'true');
		getFailedResults.query();
		while (getFailedResults.next()){
			
			// If there is a remediation task already in progress, then ignore
			if (!getFailedResults.remediation_task || getFailedResults.remediation_task.active == 'false'){
				
				// See if there is an open pattern remediation task
				var ci = getFailedResults.related_ci.ci.toString();
				var patternID = getFailedResults.service_validation_pattern;
				var patternDesc = getFailedResults.service_validation_pattern.description;
				var serviceImpact = getFailedResults.service_validation_pattern.service_impact;
				var defaultAssignment = getFailedResults.service_validation_pattern.task_owner;
				var assignedTo = this._getDefaultAssignedTo(defaultAssignment, serviceValidation, patternID);
				
				var patternGroup = patternID + "|" + patternDesc + "|" + assignedTo + "|" + serviceImpact;
				if (patternObj.hasOwnProperty(patternGroup)){
					patternObj[patternGroup].push(ci);
				}
				else{
					patternObj[patternGroup] = [ci];
				}
			}
		}
		
		for (patternGroup in patternObj){
			
			var patternArr = patternGroup.split("|");
			var patternRawID = patternArr[0];
			var patternRawDesc = patternArr[1];
			var assigneeRaw = patternArr[2];
			var priorityRaw = patternArr[3];
			var ciRaw = patternObj[patternGroup];
			var ciList = patternObj[patternGroup].join(",");
			
			// Create Remediation Task
			var tsk = new GlideRecord('x_236151_service_1_pattern_remediation_task');
			tsk.initialize();
			tsk.setValue('assignment_group', assigneeRaw);
			tsk.setValue('assigned_to', assigneeRaw);
			tsk.setValue('pattern', patternRawID);
			tsk.setValue('short_description', tsk.pattern.validation_type + ' Standard Remediation - ' + patternRawDesc);
			var desc = 'A ' + tsk.pattern.validation_type + ' Standard failure has been identified on Application Service: ' + serviceValidation.service.getDisplayValue() + '\n' + 'The failure was against the ' + tsk.pattern.validation_type + ' Standard: '+ patternRawDesc;
			if (tsk.pattern.remediation_steps){
				var kbText = 'For steps required to review and remediate this failure, visit the attached knowledge article.';
				var url = '[code]<a href="' + gs.getProperty('glide.servlet.uri') + 'kb_view.do?sys_kb_id=' + tsk.pattern.remediation_steps.sys_id.toString() + '&preview_article=true" target="_blank">' + tsk.pattern.remediation_steps.getDisplayValue() + ': Remediation Steps' + '</a>[/code]';
				desc = desc + '\n' + kbText;
				tsk.work_notes = url;
			}
			tsk.setValue('description', desc);
			tsk.setValue('priority', priorityRaw);
			tsk.setValue('service_validation', serviceValidation.sys_id);
			tsk.insert();


			
			// Link KB article
			var kbAttach = new GlideRecord('m2m_kb_task');
			kbAttach.initialize();
			kbAttach.setValue('kb_knowledge', tsk.pattern.remediation_steps);
			kbAttach.setValue('task', tsk.sys_id);
			kbAttach.insert();
			
			// Create Affected CIs
			for (var i=0;i<ciRaw.length;i++){
							
				var affCI = new GlideRecord('task_ci');
				affCI.initialize();
				affCI.task.setValue(tsk.sys_id.toString());
				affCI.ci_item.setValue(ciRaw[i]);
				affCI.insert();
			}
			
			// Update Remediation Task Field
			var updateResult = new GlideRecord('x_236151_service_1_service_validation_results');
			updateResult.addQuery('service_validation', serviceValidation.sys_id);
			updateResult.addQuery('service_validation_result', 'false');
			updateResult.addQuery('service_validation_pattern', patternRawID);
			updateResult.query();
			while (updateResult.next()){
				updateResult.remediation_task = tsk.sys_id;
				updateResult.update();
			}
		}
		
		// Auto-Close Remediation Tasks
		if (remediationTasks){
			var closeTsk = new GlideRecord('x_236151_service_1_pattern_remediation_task');
			closeTsk.addQuery('sys_id', 'IN', remediationTasks);
			closeTsk.addActiveQuery();
			closeTsk.query();
			while (closeTsk.next()){
				
				var taskCIAgg = new GlideAggregate('task_ci');
				taskCIAgg.addQuery('task', closeTsk.sys_id);
				taskCIAgg.addAggregate('COUNT');
				taskCIAgg.query();
				if (taskCIAgg.next()){
					
					// Check if there are no affected CIs associated
					if (taskCIAgg.getAggregate('COUNT') == 0){
						closeTsk.setValue('state', 3);   // Closed Complete
						closeTsk.setValue('close_notes', 'Auto-closed by Service Validation Engine');
						closeTsk.update();
					}
				}
			}
		}
	},
	
	autoCertify: function(serviceValidation){
		
		var gdt = new GlideDateTime();
		var result = 'true';
		
		// Check for Failed Results
		var failedResults = new GlideAggregate('x_236151_service_1_service_validation_results');
		failedResults.addQuery('service_validation', serviceValidation.sys_id);
		failedResults.addQuery('service_validation_result', 'false');
		failedResults.addAggregate('COUNT', 'service_validation_result');
		failedResults.query();
		if (failedResults.next()){
			result = 'false';
		}
		
		// Update Service Validation Certification Status
		var updateServiceVal = new GlideRecord('x_236151_service_1_service_validation');
		updateServiceVal.get(serviceValidation.sys_id);
		updateServiceVal.query();
		if (updateServiceVal.next()){
			updateServiceVal.certified = result;
			if (result == 'true'){
				updateServiceVal.last_certified_time = gdt;
			}
			updateServiceVal.update();
		}
	},
	
	_removeAffectedCI: function(ci, task){
		
		// Remove Affected CI
		var removeAffCI = new GlideRecord('task_ci');
		removeAffCI.addQuery('ci_item', ci);
		removeAffCI.addQuery('task', task);
		removeAffCI.query();
		if (removeAffCI.next()){
			removeAffCI.deleteRecord();
		}
	},
	
	_deactivateMappedCIs: function(serviceValidation) {
		
        var gdt = new GlideDateTime();
		
		// Check for Existing Service Validation
        var setInactive = new GlideRecord('x_236151_service_1_associated_cis');
		setInactive.addQuery('service_validation', serviceValidation.sys_id);
		setInactive.query();
		while (setInactive.next()){
			setInactive.active.setValue('false');
			setInactive.deactivated.setValue(gdt);
			setInactive.update();
		}
    },
	
	_removeInactiveResults: function(serviceValidation){
		
		// Remove Result if Mapped CI is not active
		var removeResult = new GlideRecord('x_236151_service_1_service_validation_results');
		removeResult.addQuery('service_validation', serviceValidation.sys_id);
		removeResult.addQuery('related_ci.active', 'false');
		removeResult.query();
		while (removeResult.next()){
			this._removeAffectedCI(removeResult.related_ci.configuration_item, removeResult.remediation_task);
			removeResult.deleteRecord();
		}
	},
	
	_getDefaultAssignedTo: function(type, serviceValidation, pattern){
		
		var value = '';
		
		if (type == 'Application Owner'){
			
			var getAssignTo = new GlideRecord('cmdb_ci_business_app');
			getAssignTo.get(serviceValidation.business_application);
			getAssignTo.query();
			if (getAssignTo.isValidRecord()){
				
				value = getAssignTo.getValue(pattern.application_assignment_group_user.element);
			}
			else{
				gs.addInfoMessage('Not a valid record');
			}
		}
		
		else if (type == 'Technical Owner'){
				value = pattern.technical_assignment_group;
		}
		
		return value;
		
	},
	
	_getAppServicesFromBusinessApp: function(businessApplication){
		
		var blueprintModelCatId = gs.getProperty('x_236151_service_1.blueprint_model_category_id');
		
		// Retrieve App Services from Business Application Relationship
		var appServiceList = [];
		var getAppService = new GlideRecord('cmdb_rel_ci');
		getAppService.addQuery('parent', businessApplication);
		getAppService.addQuery('child.sys_class_name', 'INSTANCEOF', 'cmdb_ci_service');
		getAppService.addEncodedQuery('child.model_id.cmdb_model_categoryLIKE' + blueprintModelCatId);
		getAppService.query();
		while (getAppService.next()){
			appServiceList.push(getAppService.child.sys_id.toString());
		}
		
		return appServiceList;
	},
	
	_createOrUpdateServiceValidation: function(appServices, businessApp) {
		
		// Check if a Service Validation record already exists for the Service, if not then create
		
        var serviceValidation;
        var gdt = new GlideDateTime();
		
		for (var i=0;i<appServices.length;i++){
			
			// Check for Existing Service Validation
			var checkExists = new GlideRecord('x_236151_service_1_service_validation');
			if (checkExists.get('service', appServices[i])) {
            checkExists.setValue('last_validation_time', gdt);
			checkExists.setValue('active', 'true');
            serviceValidation = checkExists.update();
			} else {
				checkExists.initialize();
				checkExists.setValue('active', 'true');
				checkExists.setValue('last_validation_time', gdt);
				checkExists.setValue('service', appServices[i]);
				checkExists.setValue('business_application', businessApp.sys_id);
				serviceValidation = checkExists.insert();
		}
		}
		
    },
	
	_createOrUpdateChild: function(serviceValidation, service, ci, depth) {
		
 
        var gdt = new GlideDateTime();
		
		// Locate existing Mapped CI record and set to active, set depth as appropriate - if does not exists - create a new record
        var mappedCI = new GlideRecord('x_236151_service_1_associated_cis');
        mappedCI.addQuery('service_validation', serviceValidation.sys_id);
        mappedCI.addQuery('service', service);
        mappedCI.addQuery('ci', ci);
        mappedCI.query();
        if (mappedCI.next()) {
            if (!mappedCI.active) {
                mappedCI.active.setValue('true');
                mappedCI.deactivated.setValue('');
            }
            mappedCI.last_validation_time = gdt;

            if (depth > mappedCI.depth) {
                mappedCI.depth = depth;
            }
            mappedCI.update();
        } else {
            mappedCI.initialize();
            mappedCI.service_validation.setValue(serviceValidation.sys_id);
            mappedCI.service.setValue(service);
            mappedCI.ci.setValue(ci);
            mappedCI.active.setValue('true');
            mappedCI.last_validation_time.setValue(gdt);
            mappedCI.depth.setValue(depth);
            mappedCI.insert();
        }
    },
	
	_wipeDataModels: function(serviceValidation) {
        
		// Delete Data Models for Service Validation
		var dataModels = new GlideRecord('x_236151_service_1_service_validation_data_model');
        dataModels.addQuery('service_validation', serviceValidation.sys_id);
        dataModels.deleteMultiple();
    },
	
	_findAllChildren: function(serviceValidation, service, ci) {
		
		// Locate Children - call Rels Script Include
        var getChildren = new ServiceValidationRelHelper();
        var child_arr = getChildren.cisDownFromCI(service, ["ALL"], '', serviceValidation.sys_id);
        for (var i = 0; i < child_arr.length; i++) {
				
			// Add to Flattened Table
            this._createOrUpdateChild(serviceValidation, service, child_arr[i].id, child_arr[i].depth);
        }
    },
	
	_addOrUpdateDataModel: function(parent_class, child_class, serviceValidation) {

        var parent_label = this._getTableLabel(parent_class);
        var child_label = this._getTableLabel(child_class);
		
		// Add data model for parent
        var dataModelParent = new GlideRecord('x_236151_service_1_service_validation_data_model');
        dataModelParent.addQuery('service_validation', serviceValidation);
        dataModelParent.addQuery('ci_class', parent_label);
        dataModelParent.query();
        if (!dataModelParent.next()) {
			dataModelParent.initialize();
            dataModelParent.service_validation.setValue(serviceValidation);
            dataModelParent.ci_class.setValue(parent_label);
            dataModelParent.insert();
        } 
		
		// Add data model for child
        var dataModelChild = new GlideRecord('x_236151_service_1_service_validation_data_model');
        dataModelChild.addQuery('service_validation', serviceValidation);
        dataModelChild.addQuery('parent.ci_class', parent_label);
        dataModelChild.addQuery('ci_class', child_label);
        dataModelChild.query();
        if (!dataModelChild.next()) {
			dataModelChild.initialize();
            dataModelChild.service_validation.setValue(serviceValidation);
            dataModelChild.ci_class.setValue(child_label);
			dataModelChild.parent.setValue(dataModelParent.sys_id);
			dataModelChild.insert();
        } 
    },
	
	_getTableLabel: function(table_name) {
		
        var result = 'NA';
        var getName = new GlideRecord('sys_db_object');
        getName.addQuery('name', table_name);
        getName.query();
        if (getName.next()) {
            result = getName.label;
        }
        return result;
    },

	_validatePattern: function(pattern, serviceValidation, type) {
		
		var gdt = new GlideDateTime();
        var condition = '';
        var nextLevel = this._getNextLevel(pattern, 0);
		
        var mappedCIs = new GlideAggregate('x_236151_service_1_associated_cis');
		mappedCIs.addQuery('active', 'true');
        condition = pattern.getValue('condition') || '';
		var applies_to_class = pattern.applies_to_class.toString();
		
        if (serviceValidation){
			mappedCIs.addQuery('service_validation', serviceValidation.sys_id);
		}
		if (condition.toString().length > 0){
			var queryPrefix = "ci.ref_"+applies_to_class+".";
			var patternCondition = pattern.condition.slice(0,-3);
			var conditionQuery = queryPrefix + patternCondition.replace(/\^/g, "^" + queryPrefix);
			mappedCIs.addEncodedQuery(conditionQuery);
		}
		var use_service_as_parent = false;
		if (applies_to_class == 'cmdb_ci_service_auto' && pattern.relationship_direction == 'Downstream' || applies_to_class == 'cmdb_ci_service_discovered' && pattern.relationship_direction == 'Downstream'){
			mappedCIs.addQuery('depth', '1');
			use_service_as_parent = true;
		}
		else if ((applies_to_class != serviceValidation.service.sys_class_name) && applies_to_class.length > 0){
			mappedCIs.addQuery('ci.sys_class_name', 'INSTANCEOF', pattern.applies_to_class);
		}
		mappedCIs.addAggregate('COUNT', 'ci');
		mappedCIs.query();
        while (mappedCIs.next()) {		
	
            var ci = mappedCIs.ci;
			var service = this._getServiceFromMappedCI(ci, serviceValidation.sys_id) || '';
					
			if (type == 'Blueprint'){
            var sysidcount = mappedCIs.getAggregate('COUNT', 'ci');
            var servicecount = mappedCIs.getAggregate('COUNT', 'service');
            
            var validationResult = false;
            if (nextLevel.sys_class_name && !nextLevel.sys_class_name_list) {
				if (use_service_as_parent == true){
					validationResult = this._validateRelationship(ci, nextLevel.sys_class_name, pattern, nextLevel.order, '', nextLevel.minresults, service, serviceValidation, nextLevel.excluded_ci_classes);
				}
				else{
					validationResult = this._validateRelationship(ci, nextLevel.sys_class_name, pattern, nextLevel.order, '', nextLevel.minresults, '', serviceValidation, nextLevel.excluded_ci_classes);
				}
			}
			else if (nextLevel.sys_class_name_list){
				if (use_service_as_parent == true){
					validationResult = this._validateRelationship(ci, nextLevel.sys_class_name, pattern, nextLevel.order, nextLevel.sys_class_name_list, nextLevel.minresults, service, serviceValidation, nextLevel.excluded_ci_classes);
				}
				else{
					validationResult = this._validateRelationship(ci, nextLevel.sys_class_name, pattern, nextLevel.order, nextLevel.sys_class_name_list, nextLevel.minresults, '', serviceValidation, nextLevel.excluded_ci_classes);
				}
			}
					
            this._createOrUpdateResult(ci, pattern, validationResult, service);
            this._createOrUpdateResultSummary(ci, pattern, validationResult);				
	
			}
			else if (type == 'Drift'){
				
				switch (pattern.drift_type.toString()){
						
					case "CI Attribute Changed":
						new DriftHelper().ciAttributeChanged(ci, serviceValidation, pattern, service);
						return;
					
					case "CI Relationship Created":
						new DriftHelper().ciRelCreated(ci, serviceValidation, pattern, service);
						return;
					
					case "CI Relationship Removed":
						new DriftHelper().ciRelRemoved(ci, serviceValidation, pattern, service);
						return;
					
					default:
						return;
				}			
			}
        }
    },
	
	_getNextLevel: function(pattern, order) {

		// Lookup Pattern Definitions for the Pattern by Order
        var res = [];
        var getDef = new GlideRecord('x_236151_service_1_pattern_definition');
        getDef.addQuery('service_validation_pattern', pattern.sys_id);
        getDef.addQuery('order', '>', order);
        getDef.setLimit(1);
        getDef.query();
        if (getDef.next()) {

            res.sys_class_name = getDef.ci_class.name;
			res.excluded_ci_classes = '';
            if (getDef.ci_classes.toString().length > 0) {
                res.sys_class_name_list = this._findTableName(getDef.ci_classes);
            }
			if (getDef.excluded_ci_classes){
				res.excluded_ci_classes = this._findTableName(getDef.excluded_ci_classes);
			}
            res.minresults = getDef.minimum_number_of_results;
            res.order = getDef.order;
            return res;
        }
    },
	
	_findTableName: function(sysids) {
        var result = [];
        var getNames = new GlideRecord('sys_db_object');
        getNames.addQuery('sys_id', 'IN', sysids);
        getNames.query();
        while (getNames.next()) {
            result.push(getNames.name.toString());
        }
        return result;
    },
	
	_getServiceFromMappedCI: function(ci, serviceValidation) {
		
		// Retrieve Service from Mapped CI record
        var getService = new GlideRecord('x_236151_service_1_associated_cis');
		getService.addQuery('ci', ci);
		getService.addQuery('service_validation', serviceValidation);
		getService.query();
        if (getService.next()) {
					
            return getService.service.sys_id;
        }
        return false;
    },

	_validateRelationship: function(ci, ciClass, pattern, order, classList, minresults, service, serviceValidation, excludedCIClasses) {
			
		var queryDirection = '';
		var listQuery = '';
		if (pattern.relationship_direction.toString() == 'Downstream'){
			queryDirection = 'parent';
			listQuery = 'child';
		}
		else if (pattern.relationship_direction.toString() == 'Upstream'){
			queryDirection = 'child';
			listQuery = 'parent';
		}

		// Check Parent and Child CI Rels against the expected classes
        var result = false;
		var getRel = new GlideAggregate('cmdb_rel_ci');
        if (service != '' && pattern.relationship_direction == 'Downstream') {
            getRel.addQuery('parent', service);
            getRel.addQuery('child', ci);
        } else {
            getRel.addQuery(queryDirection, ci);
        }

        var qc = '';
        if (classList.length > 0) {

            for (var i = 0; i < classList.length; i++) {
                if (i == 0) {
                    qc = getRel.addQuery(listQuery+'.sys_class_name', 'INSTANCEOF', classList[i]);
                }
                if (i > 0) {
                    qc.addOrCondition(listQuery+'.sys_class_name', 'INSTANCEOF', classList[i]);
                }
            }
        } else {
            getRel.addQuery(listQuery+'.sys_class_name', 'INSTANCEOF', ciClass);
        }
		
		if (excludedCIClasses.length > 0){
			
			for (var j=0;j < excludedCIClasses.length;j++){
				getRel.addQuery(listQuery+'.sys_class_name', '!=', excludedCIClasses[j]);
			}
		}
		getRel.groupBy(queryDirection);
		getRel.addAggregate('COUNT');
        getRel.query();
        if (getRel.next()) {
			
            if (minresults && minresults > 1) {
				var rows = getRel.getAggregate('COUNT');
                if (rows < minresults) {
                    return false;
                }
            }
			else if (getRel.getAggregate('COUNT') == 0){
				return false;
			}
			else{
            result = true;
			}
        }
		
		if (result.toString() == 'false' && pattern.store_invalid_relationships.toString() == 'true'){
			
			// Get Invalid Rels
			var countRel = new GlideAggregate('cmdb_rel_ci');
			if (service != ''){
				countRel.addQuery('parent', service);
			}
			else{
				countRel.addQuery(queryDirection, ci);
			}
			if (classList.length > 0){
				
				for (var c=0;c < classList.length;c++){
					var tables = new GlideTableHierarchy(classList[c].toString());
					var tableList = tables.getAllExtensions().join(",");
					countRel.addQuery(listQuery+'.sys_class_name', 'NOT IN', tableList);
				}
			}
			else{
				countRel.addQuery(queryDirection+'.sys_class_name', '!=', ciClass);
			}
			countRel.addAggregate('COUNT', 'sys_id');
			countRel.query();
			while (countRel.next()){
				
				var relID = countRel.sys_id.toString();
				
				// Create Invalid Relationship Record
				var addRel = new GlideRecord('x_236151_service_1_m2m_ci_relations_service_vali');
				addRel.addQuery('ci_relationship', relID.toString());
				addRel.addQuery('service_validation', serviceValidation.sys_id);
				addRel.addQuery('service_validation_pattern', pattern.sys_id);
				addRel.query();
				if (!addRel.next()){
					addRel.initialize();
					addRel.setValue('ci_relationship', relID);
					addRel.setValue('service_validation', serviceValidation.sys_id);
					addRel.setValue('service_validation_pattern', pattern.sys_id);
					addRel.insert();
				}
			}
		}
        return result;
    },
	
	_createOrUpdateResult: function(ci, pattern, result, service) {

		// Get Mapped CI - create or update result
        var gdt = new GlideDateTime();
        var mappedCI = new GlideRecord('x_236151_service_1_associated_cis');
        if (service.length == 32) {
            mappedCI.addQuery('service', service);
        }
        mappedCI.addQuery('ci', ci);
        mappedCI.query();
        while (mappedCI.next()) {		
 
			// Check for Existing Result, or Create New
            var setResult = new GlideRecord('x_236151_service_1_service_validation_results');
            setResult.addQuery('service_validation', mappedCI.service_validation.sys_id);
            setResult.addQuery('service_validation_pattern', pattern.sys_id);
            setResult.addQuery('related_ci', mappedCI.sys_id);
            setResult.query();
            if (setResult.next()) {
				
				// Update Result
                setResult.last_validation_time.setValue(gdt);
                setResult.service_validation_result.setValue(result.toString());
                setResult.update();
            } else {

                setResult.initialize();
                setResult.related_ci.setValue(mappedCI.sys_id);
                setResult.service_validation.setValue(mappedCI.service_validation.sys_id);
                setResult.service_validation_pattern.setValue(pattern.sys_id);
                setResult.last_validation_time.setValue(gdt);
                setResult.service_validation_result.setValue(result.toString());
                setResult.insert();
            }
        }
    },
	
	_createOrUpdateResultSummary: function(ci, pattern, result) {
		
        var gdt = new GlideDateTime();
        var mappedCI = new GlideRecord('x_236151_service_1_associated_cis');
        mappedCI.addQuery('ci', ci);
        mappedCI.query();
        while (mappedCI.next()) {
            var setResult = new GlideRecord('x_236151_service_1_service_validation_results');
            setResult.addQuery('service_validation', mappedCI.service_validation.sys_id);
            setResult.addQuery('service_validation_pattern', pattern.sys_id);
            setResult.addNullQuery('related_ci');
            setResult.query();
            if (setResult.next()) {
                setResult.last_validation_time.setValue(gdt);
                setResult.service_validation_result.setValue(result);
                setResult.update();
            } else {
				// Create Result
                setResult.initialize();
                setResult.service_validation.setValue(mappedCI.service_validation.sys_id);
                setResult.service_validation_pattern.setValue(pattern.sys_id);
                setResult.last_validation_time.setValue(gdt);
                setResult.service_validation_result.setValue(result);
                setResult.insert();
            }
        }
    },
	
	_createOrUpdatePerformanceStat: function(description, start, type, svGr) {
		
		// Create Performance State for Performance Logging
        var gdt = new GlideDateTime();
        var setPerf = new GlideRecord('x_236151_service_1_validation_performance');
        setPerf.addQuery('description', description);
        setPerf.query();
        if (setPerf.next()) {
            setPerf.last_run_time.setValue(gdt);
            setPerf.duration.setValue(GlideDateTime.subtract(start, gdt));
			if (svGr){
				setPerf.service_validation.setValue(svGr.sys_id);
			}
            setPerf.update();
        } else {
            setPerf.initialize();
            setPerf.description.setValue(description);
			setPerf.type.setValue(type);
            setPerf.last_run_time.setValue(gdt);
            setPerf.duration.setValue(GlideDateTime.subtract(start, gdt));
			if (svGr){
				setPerf.service_validation.setValue(svGr.sys_id);
			}
            setPerf.insert();
        }
    },
	
	_calculateWeightedControlKPI: function(serviceValidation) {
		
        var getResults1 = new GlideRecord('x_236151_service_1_service_validation_results');
        getResults1.addQuery('service_validation', serviceValidation);
        getResults1.addQuery('service_validation_pattern.validation_type', 'Blueprint');
        getResults1.query();
        while (getResults1.next()) {
            var impact = parseInt(this._calculateWeightedScore(getResults1.service_validation_pattern.service_impact));
            var calcImpact = impact / 100; 
            var getResults2 = new GlideRecord('x_236151_service_1_service_validation_results');
            getResults2.addQuery('service_validation', serviceValidation);
            getResults2.addQuery('service_validation_pattern', getResults1.service_validation_pattern);
            getResults2.query();
            var total = parseInt(getResults2.getRowCount());
            var getResults3 = new GlideRecord('x_236151_service_1_service_validation_results');
            getResults3.addQuery('service_validation', serviceValidation);
            getResults3.addQuery('service_validation_pattern', getResults1.service_validation_pattern);
            getResults3.addQuery('service_validation_result', 'false');
            getResults3.query();
            var failed = parseInt(getResults3.getRowCount());
            var score = 100 - (100 * (failed / total));

            if (isNaN(score)) {
                score = 100;
            }
            var weightedScore = 100 - (calcImpact * (100 * (failed / total)));
            if (isNaN(weightedScore) || calcImpact == 0) {
                weightedScore = 100;
            }
            if (score == 0 || calcImpact == 1) {
                weightedScore = 0;
            }

            getResults1.control_kpi.setValue(score);
            getResults1.weighted_control_kpi.setValue(weightedScore);
            getResults1.update();
        }
    },
	
    _calculateWeightedScore: function(impact) {

        var weight = this._getRiskLevel(this.thresholdMatrix, impact);
        return weight;
    },
	

    _getRiskLevel: function(matrix, impact) {
		
        var aPair;
        var answer;
        var threshold;
        var risk;

        if (global.JSUtil.nil(matrix)) {
            return;
        }

        matrix
            .split(/\s*,\s*/)
            .forEach(function(pair) {
                aPair = pair.split(/\s*\=\s*/);
                risk = parseInt(aPair[0], 10);
                threshold = parseInt(aPair[1], 10);
                if (risk == impact) {
                    if (!answer) {
                        answer = threshold;
                    }
                }
            });

        return answer;
    },
		
    type: 'ServiceValidationHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-27 19:04:08</sys_created_on>
        <sys_id>29a85d9597512110892239000153af4d</sys_id>
        <sys_mod_count>260</sys_mod_count>
        <sys_name>ServiceValidationHelper</sys_name>
        <sys_package display_value="Service Validation Engine" source="x_236151_service_1">3fc45ddd97112110892239000153aff9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Service Validation Engine">3fc45ddd97112110892239000153aff9</sys_scope>
        <sys_update_name>sys_script_include_29a85d9597512110892239000153af4d</sys_update_name>
        <sys_updated_by>jdowns8@dxc.com</sys_updated_by>
        <sys_updated_on>2023-06-12 10:37:31</sys_updated_on>
    </sys_script_include>
</record_update>
