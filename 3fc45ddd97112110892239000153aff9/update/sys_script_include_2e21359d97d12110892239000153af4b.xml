<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_236151_service_1.ServiceValidationHelper_CIUtils2</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ServiceValidationHelper_CIUtils2</name>
        <script><![CDATA[var ServiceValidationHelper_CIUtils2 = Class.create();
ServiceValidationHelper_CIUtils2.prototype = {
    initialize: function() {
        this.maxDepth = gs.getProperty('glide.relationship.max_depth', 10); // how deep to look
        this.maxAffectedCIs = gs.getProperty('glide.relationship.threshold', 1000); // max records to return
        this.defaultClasses = ['cmdb_ci_service', 'service_offering'];
        this.arutil = new ArrayUtil();
        this.sve = new ServiceValidationHelper();
    },
    cisAffectedByCI: function(id, classArr, infoObj /*optional*/ ) {
        if (!infoObj) {
            infoObj = this._getInfoObj();
        }
        if (infoObj.visitedCIs[id]) {
            // We've already processed this CI
            return [];
        }
        infoObj.visitedCIs[id] = true;
        if (!classArr || classArr.length == 0) {
            classArr = this.defaultClasses;
        }

        // This is to keep track of affected CIs from this CI only.
        // CIs that are already listed in infoObj.affectedCIs from prior
        // calls to the function will not be included.
        var affectedCIs = [];
        var ci = new GlideRecord('cmdb_ci');
        if (ci.get(id)) {
            //If class = 'ALL' then just add the CI
            if (classArr[0] == 'ALL' || this.arutil.contains(classArr, ci.sys_class_name.toString())) {
                affectedCIs.push(id);
                this._addCI(id, infoObj);
            }
            this._addParentCIs(id, infoObj, affectedCIs, 1, classArr);
        }
        return this._unique(affectedCIs); // list of affected CIs
    },

    cisDownFromCI: function(id, classArr, infoObj /*optional*/ , service_validation) {
        if (!infoObj) {
            infoObj = this._getInfoObj();
        }
        if (infoObj.visitedCIs[id]) {
            // We've already processed this CI
            return [];
        }
        infoObj.visitedCIs[id] = true;
        if (!classArr || classArr.length == 0) {
            classArr = this.defaultClasses;
        }

        // This is to keep track of affected CIs from this CI only.
        // CIs that are already listed in infoObj.affectedCIs from prior
        // calls to the function will not be included.
        var affectedCIs = [];
        var ci = new GlideRecord('cmdb_ci');
        if (ci.get(id)) {
            //If class = 'ALL' then just add the CI
            if (classArr[0] == 'ALL' || this.arutil.contains(classArr, ci.sys_class_name.toString())) {
                //affectedCIs.push(id);
                //this._addCI(id, infoObj);
            }
            this._addChildCIs(id, infoObj, affectedCIs, 1, classArr, service_validation);
        }
        return this._unique(affectedCIs); // list of affected CIs
    },

    /**
     * Determine which CIs are affected by a task
     *
     * Inputs:
     * task is a task GlideRecord (e.g., incident, change_request, problem)
     * classArr is an array of CI class names that should be returned
     *
     * Returns:
     * an array of sys_id values for cmdb_ci records upstream from
     * (or affected by) the configuration item referenced by the task's cmdb_ci field and Affected CIs list
     */

    cisAffectedByTask: function(task, classArr) {
        var infoObj = this._getInfoObj();
        //Find the impacted CIs for the 'cmdb_ci' value
        var id = task.cmdb_ci.toString();
        if (id) {
            this.cisAffectedByCI(id, classArr, infoObj);
        }

        //Find the impacted CIs for any Affected CIs listed on the task
        var affCI = new GlideRecord('task_ci');
        affCI.addQuery('task', task.sys_id);
        affCI.query();
        while (affCI.next()) {
            this.cisAffectedByCI(affCI.ci_item.sys_id.toString(), classArr, infoObj);
        }
        return this._objToArray(infoObj.affectedCIs);
    },

    /**
     * Returns an XML-formatted string showing all CIs impacted by an outage to the CI given
     *
     * Inputs:
     * id is the sys_id of the root CI
     *
     * Returns:
     * an XML-formatted string containing cmdb_ci records downstream of
     * (or affected by) the configuration item provided as input
     */

    getCIXML: function(id) {
        var gr = new GlideRecord('cmdb_rel_ci');
        gr.addQuery('child', id);
        gr.query();
        gr.next();
        var str = '';
        str += '<CI>';
        str += '<sys_id>' + gr.child.sys_id + '</sys_id>';
        str += '<name>' + gr.child.name + '</name>';
        str += '<relType>SELF</relType>';
        ret = this._recurs(id);
        if (ret) {
            str += '<children>';
            str += ret;
            str += '</children>';
        }
        str += '</CI>';
        return str;
    },

    _recurs: function(ci) {
        var gr = new GlideRecord('cmdb_rel_ci');
        gr.addQuery('child', ci);
        gr.query();
        var str = '';
        while (gr.next()) {
            str += '<CI>';
            str += '<sys_id>' + gr.parent.sys_id + '</sys_id>';
            str += '<name>' + gr.parent.name + '</name>';
            str += '<relType>' + gr.type.name + '</relType>';
            ret = this._recurs(gr.parent.sys_id);
            if (ret) {
                str += '<children>';
                str += ret;
                str += '</children>';
            }
            str += '</CI>';
        }
        return str;
    },

    _addParentCIs: function(id, infoObj, affectedCIs, currentDepth, classArr) {
        if (infoObj.affectedCIsCount >= this.maxAffectedCIs)
            return;

        var rel = new GlideRecord('cmdb_rel_ci');
        rel.addQuery('child', id);
        rel.query();

        var parents = [];
        while (rel.next()) {
            parents.push(rel.parent.toString());
        }
        if (parents.length) {
            var parent = new GlideRecord('cmdb_ci');
            parent.addQuery('sys_id', parents);
            parent.query();

            while (parent.next() && infoObj.affectedCIsCount < this.maxAffectedCIs) {
                var pid = parent.sys_id.toString();
                if (!infoObj.visitedCIs[pid]) {
                    infoObj.visitedCIs[pid] = true;
                    if (classArr[0] == 'ALL' || this.arutil.contains(classArr, parent.sys_class_name.toString())) {
                        affectedCIs.push(pid);
                        this._addCI(pid, infoObj);
                    }
                    if (currentDepth < this.maxDepth)
                        this._addParentCIs(pid, infoObj, affectedCIs, currentDepth + 1, classArr);
                }
            }
        }
    },
    _addChildCIs: function(id, infoObj, affectedCIs, currentDepth, classArr, service_validation) {
        if (infoObj.affectedCIsCount >= this.maxAffectedCIs)
            return;

        var rel = new GlideRecord('cmdb_rel_ci');
        rel.addQuery('parent', id);
        rel.query();

        var childs = [];
        while (rel.next()) {
            childs.push(rel.child.toString());
            this.sve.addOrUpdateDataModel(rel.parent.sys_class_name, rel.child.sys_class_name, service_validation);
        }
        if (childs.length) {
            var child = new GlideRecord('cmdb_ci');
            child.addQuery('sys_id', childs);
            child.query();

            while (child.next() && infoObj.affectedCIsCount < this.maxAffectedCIs) {
                var pid = child.sys_id.toString();
                if (!infoObj.visitedCIs[pid]) {
                    infoObj.visitedCIs[pid] = true;
                    if (classArr[0] == 'ALL' || this.arutil.contains(classArr, child.sys_class_name.toString())) {
                        affectedCIs.push(pid);
                        this._addCI(pid, infoObj);
                    }
                    if (currentDepth < this.maxDepth)
                        this._addChildCIs(pid, infoObj, affectedCIs, currentDepth + 1, classArr, service_validation);
                }
            }
        }
    },

    _addCI: function(id, infoObj) {
        infoObj.affectedCIs[id] = true;
        infoObj.affectedCIsCount++;
    },

    _getInfoObj: function() {
        return {
            affectedCIsCount: 0, // track how many added, since can't get size() for an Object
            affectedCIs: {}, // full list of affected CIs for specified classes
            visitedCIs: {} // track CIs already iterated over
        };
    },

    _objToArray: function(obj) {
        var ar = [];
        for (var id in obj) {
            ar.push(id);
        }
        return ar;
    },

    _unique: function(a) {
        var obj = {};
        for (var idx in a) {
            obj[a[idx]] = true;
        }
        return this._objToArray(obj);
    },
    type: 'ServiceValidationHelper_CIUtils2'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-27 20:52:10</sys_created_on>
        <sys_id>2e21359d97d12110892239000153af4b</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>ServiceValidationHelper_CIUtils2</sys_name>
        <sys_package display_value="Service Validation Engine" source="x_236151_service_1">3fc45ddd97112110892239000153aff9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Service Validation Engine">3fc45ddd97112110892239000153aff9</sys_scope>
        <sys_update_name>sys_script_include_2e21359d97d12110892239000153af4b</sys_update_name>
        <sys_updated_by>tomi.rekonen</sys_updated_by>
        <sys_updated_on>2023-03-22 17:25:55</sys_updated_on>
    </sys_script_include>
</record_update>
