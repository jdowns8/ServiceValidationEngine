<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_236151_service_1.ServiceValidationRelHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Functions called by script include "ServiceValidationHelper"&#13;
cisDownFromCI: Call the _addChildCIs function for specified parent CI&#13;
&#13;
Internally called functions&#13;
_getInfoObj: Tracking which CIs have already been processed within an object&#13;
_addChildCIs: Lookup qualifying CI relationships&#13;
_addCI: Add CI found to the info object&#13;
_unique: Call _objToArray to return unique affected CIs&#13;
_objToArray: Covert Obj to Array</description>
        <name>ServiceValidationRelHelper</name>
        <script><![CDATA[var ServiceValidationRelHelper = Class.create();
ServiceValidationRelHelper.prototype = {
    initialize: function() {
        this.maxDepth = gs.getProperty('x_236151_service_1.mapped.ci.max.depth', 4); // how deep to look
        this.maxAffectedCIs = gs.getProperty('x_236151_service_1.mapped.ci.max.threshold', 10000); // max records to return
        this.defaultClasses = ['cmdb_ci_service', 'service_offering'];
		this.excludedClasses = gs.getProperty('x_236151_service_1.mapped.ci.excluded.ci.classes'); // excluded classes
        this.arutil = new ArrayUtil();
        this.sve = new ServiceValidationHelper();
    },
	
    cisDownFromCI: function(id, classArr, infoObj, serviceValidation) {
        if (!infoObj) {
            infoObj = this._getInfoObj();
        }
        if (infoObj.visitedCIs[id]) {
            // We've already processed this CI
            return [];
        }
        infoObj.visitedCIs[id] = true;
        if (!classArr || classArr.length == 0) {
            classArr = this.defaultClasses;
        }

        var affectedCIs = [];
		this._addChildCIs(id, infoObj, affectedCIs, 1, classArr, serviceValidation);
        return this._unique(affectedCIs); // list of affected CIs
    },

    _addChildCIs: function(id, infoObj, affectedCIs, currentDepth, classArr, serviceValidation) {

		if (infoObj.affectedCIsCount >= this.maxAffectedCIs)
            return;
		
		
		var gdt = new GlideDateTime();
		
		/*  ********************* Attempt 1 - Pagination  *********************
		// Paginate/Batch the CMDB Rel CI Query - for Performance Gains
		var starts = [0, 200, 400, 600];
		var getNext = Paginator.paginateCIRels('cmdb_rel_ci', 'parent='+id+'^child.sys_class_nameNOT IN'+this.excludedClasses);
		var pageSize = 199;

		
		var childs = [];

		for (var x = 0; x < starts.length; x++ ) {
			var childBatch = getNext(starts[x], starts[x] + pageSize); // Returns Sys_ID list of Child CIs within batch
			
			for (var c = 0; c < childBatch.length; c++){
			
				var pid = childBatch[c].childID;
				childs.push(pid); // Push each sys_id to the Childs array
				
				
				
			this.sve._addOrUpdateDataModel(childBatch[c].parentClass, childBatch[c].childClass, serviceValidation);
				
			if (infoObj.affectedCIsCount < this.maxAffectedCIs){
				if (!infoObj.visitedCIs[pid]) {
                    infoObj.visitedCIs[pid] = true;
                    if (classArr[0] == 'ALL' || this.arutil.contains(classArr, childBatch[c].childClass.toString())) {
                        affectedCIs.push({"id": pid, "depth": currentDepth});
                        this._addCI(pid, infoObj);
                    }
                    if (currentDepth < this.maxDepth){
                        this._addChildCIs(pid, infoObj, affectedCIs, currentDepth + 1, classArr, serviceValidation);
					}
                }
			}
			
			}
		}
		this.sve._createOrUpdatePerformanceStat(serviceValidation.number + " paginated", gdt, "Function", serviceValidation);
		
		var childs = [];
		var rel = new GlideAggregate('cmdb_rel_ci');
        rel.addQuery('parent', id);
		rel.addQuery('child.sys_class_name', 'NOT IN', this.excludedClasses);
		rel.addAggregate('COUNT', 'sys_id');
        rel.query();
		while (rel.next()){
			
			var relObj = this._getRelComponents(rel.getValue('sys_id'));
			childs.push(relObj.child.toString());
			this.sve._addOrUpdateDataModel(relObj.parentClass.toString(), relObj.childClass.toString(), serviceValidation);
		}
		
		*/

        var rel = new GlideRecord('cmdb_rel_ci');
        rel.addQuery('parent', id);
		rel.addQuery('child.sys_class_name', 'NOT IN', this.excludedClasses);
        rel.query();

        var childs = [];
        while (rel.next()) {
            childs.push(rel.child.toString());
            this.sve._addOrUpdateDataModel(rel.parent.sys_class_name, rel.child.sys_class_name, serviceValidation);
        }
		
        if (childs.length) {

            var child = new GlideRecord('cmdb_ci');
            child.addQuery('sys_id', childs);
            child.query();

            while (child.next() && infoObj.affectedCIsCount < this.maxAffectedCIs) {
							
                var pid = child.sys_id.toString();
                if (!infoObj.visitedCIs[pid]) {
                    infoObj.visitedCIs[pid] = true;
                    if (classArr[0] == 'ALL' || this.arutil.contains(classArr, child.sys_class_name.toString())) {
                        affectedCIs.push({"id": pid, "depth": currentDepth});
                        this._addCI(pid, infoObj);
                    }
                    if (currentDepth < this.maxDepth){
                        this._addChildCIs(pid, infoObj, affectedCIs, currentDepth + 1, classArr, serviceValidation);
					}
                }
            }
        }
		this.sve._createOrUpdatePerformanceStat(serviceValidation.number + " oldfunc", gdt, "Function", serviceValidation);
		
    },
	
	_getRelComponents: function(id){
				
		var getRel = new GlideRecord('cmdb_rel_ci');
		getRel.get(id);
		getRel.query();
		if (getRel.next()){
		var relObj = {"parent": getRel.parent, "parentClass": getRel.parent.sys_class_name, "child": getRel.child, "childClass": getRel.child.sys_class_name};
			
		return relObj;
		}

	},

    _addCI: function(id, infoObj) {
        infoObj.affectedCIs[id] = true;
        infoObj.affectedCIsCount++;
    },

    _getInfoObj: function() {
        return {
            affectedCIsCount: 0, // track how many added, since can't get size() for an Object
            affectedCIs: {}, // full list of affected CIs for specified classes
            visitedCIs: {} // track CIs already iterated over
        };
    },

    _objToArray: function(obj) {
        var ar = [];
        for (var el in obj) {
            ar.push(obj[el]);
        }
        return ar;
    },

    _unique: function(a) {
        var obj = {};
        for (var idx in a) {
            obj[a[idx].id] = { "id": a[idx].id, "depth": a[idx].depth};
        }
        return this._objToArray(obj);
    },
    type: 'ServiceValidationRelHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-27 20:52:10</sys_created_on>
        <sys_id>2e21359d97d12110892239000153af4b</sys_id>
        <sys_mod_count>80</sys_mod_count>
        <sys_name>ServiceValidationRelHelper</sys_name>
        <sys_package display_value="Service Validation Engine" source="x_236151_service_1">3fc45ddd97112110892239000153aff9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Service Validation Engine">3fc45ddd97112110892239000153aff9</sys_scope>
        <sys_update_name>sys_script_include_2e21359d97d12110892239000153af4b</sys_update_name>
        <sys_updated_by>jdowns8@dxc.com</sys_updated_by>
        <sys_updated_on>2023-06-06 12:48:56</sys_updated_on>
    </sys_script_include>
</record_update>
